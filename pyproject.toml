[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"


[project]
name = "arrakis"
authors = [
  { name = "Alec Thomson", email = "alec.thomson@csiro.au" },
  { name = "Tim Galvin", email = "tim.galvin@csiro.au" },
]
description = "Processing the SPICE."
readme = "README.md"
license.file = "LICENSE"
requires-python = ">=3.10, <3.11"
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
dynamic = ["version"]
dependencies = [
    "numpy>=1.26.4",
    "astropy>=5",
    "bilby",
    "ConfigArgParse",
    "dask",
    "distributed @ git+https://github.com/AlecThomson/distributed@drainclose",
    "FRion>=1.1.3",
    "h5py",
    "ipython",
    "matplotlib>=3.8",
    "numba",
    "numba_progress",
    "pandas>=2",
    "psutil",
    "pymongo",
    "pymultinest",
    "pytest",
    "python_casacore",
    "RACS-tools>=3.0.5",
    "radio_beam",
    "scipy",
    "spectral_cube>=0.6.3",
    "spython",
    "tqdm",
    "vorbin",
    "graphviz",
    "bokeh<3",
    "prefect>=2",
    "prefect-dask",
    "RMTable>=1.2.1",
    "RM-Tools>=1.4.2",
    "PolSpectra>=1.1.0",
    "fixms>=0.2.6",
    "fitscube>=0.3",
    "psycopg2-binary",
    "sqlalchemy",
    "scikit-image>=0.23",
    "setuptools",
]

[project.optional-dependencies]
test = [
  "pytest >=6",
  "pytest-cov >=3",
]
dev = [
  "pytest >=6",
  "pytest-cov >=3",
]
docs = [
  "sphinx",
  "sphinx_rtd_theme",
  "sphinx-book-theme",
  "sphinx-autoapi",
  "m2r2",
  "numpydoc",
  "sphinxcontrib-mermaid",
]
mpi = [
  "dask_mpi",
  "mpi4py",
]

jobqueue = [
  "dask_jobqueue >=0.8.3",
]

ion = [
  "RMextract>=0.5.0",
]

[project.urls]
Homepage = "https://research.csiro.au/racs/"
Repository = "https://github.com/AlecThomson/arrakis"
"Bug Tracker" = "https://github.com/AlecThomson/arrakis/issues"
Discussions = "https://github.com/AlecThomson/arrakis/discussions"
Changelog = "https://github.com/AlecThomson/arrakis/releases"
Documentation = "https://arrakis.readthedocs.io"

[project.scripts]
spice_init = "arrakis.init_database:cli"
spice_process = "arrakis.process_spice:cli"
spice_region = "arrakis.process_region:cli"
spice_cat = "arrakis.makecat:cli"
spice_image = "arrakis.imager:cli"

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "arrakis/_version.py"
metadata.allow-direct-references = true

[tool.hatch.envs.default]
features = ["test"]
scripts.test = "pytest {args}"

[tool.hatch.build.targets.wheel]
packages = ["arrakis"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]


[tool.coverage]
run.source = ["arrakis"]
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["arrakis", "tests"]
python_version = "3.8"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "arrakis.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = "astropy.*"
ignore_missing_imports = true

[tool.ruff]
src = ["arrakis"]

[tool.ruff.lint]
extend-select = [
  "B",        # flake8-bugbear
  "I",        # isort
  "ARG",      # flake8-unused-arguments
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "ICN",      # flake8-import-conventions
  # "G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "D",        # flake8-docstrings
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["fitscube._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["ALL"]
"scripts/**" = ["ALL"]
"noxfile.py" = ["T20"]
"docs/**" = ["ALL"]
"submit/**" = ["ALL"]
# Ignore all rules for wsclean
"arrakis/wsclean_rmsynth.py" = ["ALL"]

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.pylint]
py-version = "3.8"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "missing-function-docstring",
  "wrong-import-position",
]

[tool.codespell]
ignore-words-list = "datas"
